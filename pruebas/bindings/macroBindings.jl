# Auto-generated file
struct C_MPI_Status
    MPI_SOURCE::Cint
    MPI_TAG::Cint
    MPI_ERROR::Cint
    _private0::Cint
    _private1::Csize_t
end
primitive type MPIPtr Sys.WORD_SIZE end
const ArgPtr{T}= Union{Ref{T},Ptr{T}}
const C_MPI_Datatype = Ptr{Cvoid}
const C_int = Cint
const C_char = Cchar
const C_MPI_Op = Ptr{Cvoid}
const C_void = Cvoid
const C_MPI_Comm = Ptr{Cvoid}
const C_MPI_Datarep_conversion_function = Ptr{Cvoid}
const C_MPI_Errhandler = Ptr{Cvoid}
const C_MPI_File = Ptr{Cvoid}
const C_MPI_Fint = Cint
const C_MPI_Group = Ptr{Cvoid}
const C_MPI_Info = Ptr{Cvoid}
const C_MPI_Message = Ptr{Cvoid}
const C_MPI_Request = Ptr{Cvoid}
const C_MPI_T_cvar_handle = Ptr{Cvoid}
const C_MPI_T_enum = Ptr{Cvoid}
const C_MPI_T_pvar_handle = Ptr{Cvoid}
const C_MPI_T_pvar_session = Ptr{Cvoid}
const C_MPI_Win = Ptr{Cvoid}
const C_MPI_Aint = Clong
const C_MPI_Comm_errhandler_function = Ptr{Cvoid}
const C_MPI_Comm_copy_attr_function = Ptr{Cvoid}
const C_MPI_Comm_delete_attr_function = Ptr{Cvoid}
const C_MPI_File_errhandler_function = Ptr{Cvoid}
const C_MPI_Offset = Clonglong
const C_MPI_Count = Clonglong
const C_MPI_Grequest_query_function = Ptr{Cvoid}
const C_MPI_Grequest_free_function = Ptr{Cvoid}
const C_MPI_Grequest_cancel_function = Ptr{Cvoid}
const C_MPI_Copy_function = Ptr{Cvoid}
const C_MPI_Delete_function = Ptr{Cvoid}
const C_MPI_User_function = Ptr{Cvoid}
const C_MPI_Datarep_extent_function = Ptr{Cvoid}
const C_MPI_Type_copy_attr_function = Ptr{Cvoid}
const C_MPI_Type_delete_attr_function = Ptr{Cvoid}
const C_MPI_Win_errhandler_function = Ptr{Cvoid}
const C_MPI_Win_copy_attr_function = Ptr{Cvoid}
const C_MPI_Win_delete_attr_function = Ptr{Cvoid}
const C_double = Cdouble


const MPI_2COMPLEX::C_MPI_Datatype = C_MPI_Datatype(cglobal(("ompi_mpi_2cplex","libmpi"),C_MPI_Datatype))
const MPI_2DOUBLE_COMPLEX::C_MPI_Datatype = C_MPI_Datatype(cglobal(("ompi_mpi_2dblcplex","libmpi"),C_MPI_Datatype))
const MPI_2DOUBLE_PRECISION::C_MPI_Datatype = C_MPI_Datatype(cglobal(("ompi_mpi_2dblprec","libmpi"),C_MPI_Datatype))
const MPI_2INT::C_MPI_Datatype = C_MPI_Datatype(cglobal(("ompi_mpi_2int","libmpi"),C_MPI_Datatype))
const MPI_2INTEGER::C_MPI_Datatype = C_MPI_Datatype(cglobal(("ompi_mpi_2integer","libmpi"),C_MPI_Datatype))
const MPI_2REAL::C_MPI_Datatype = C_MPI_Datatype(cglobal(("ompi_mpi_2real","libmpi"),C_MPI_Datatype))
const MPI_AINT::C_MPI_Datatype = C_MPI_Datatype(cglobal(("ompi_mpi_aint","libmpi"),C_MPI_Datatype))
const MPI_ANY_SOURCE::C_int = -1
const MPI_ANY_TAG::C_int = -1
const MPI_ARGVS_NULL::Ptr{Ptr{Ptr{C_char}}} = 0
const MPI_ARGV_NULL::Ptr{Ptr{C_char}} = 0
const MPI_BAND::C_MPI_Op = C_MPI_Op(cglobal(("ompi_mpi_op_band","libmpi"),C_MPI_Op))
const MPI_BOR::C_MPI_Op = C_MPI_Op(cglobal(("ompi_mpi_op_bor","libmpi"),C_MPI_Op))
const MPI_BOTTOM::Ptr{C_void} = 0
const MPI_BSEND_OVERHEAD::C_int = 128
const MPI_BXOR::C_MPI_Op = C_MPI_Op(cglobal(("ompi_mpi_op_bxor","libmpi"),C_MPI_Op))
const MPI_BYTE::C_MPI_Datatype = C_MPI_Datatype(cglobal(("ompi_mpi_byte","libmpi"),C_MPI_Datatype))
const MPI_CART::C_int = 1
const MPI_CHAR::C_MPI_Datatype = C_MPI_Datatype(cglobal(("ompi_mpi_char","libmpi"),C_MPI_Datatype))
const MPI_CHARACTER::C_MPI_Datatype = C_MPI_Datatype(cglobal(("ompi_mpi_character","libmpi"),C_MPI_Datatype))
const MPI_COMM_DUP_FN::Ptr{Cvoid} = Ptr{Cvoid}(cglobal(("OMPI_C_MPI_COMM_DUP_FN","libmpi"),Ptr{Cvoid}))
const MPI_COMM_NULL::C_MPI_Comm = C_MPI_Comm(cglobal(("ompi_mpi_comm_null","libmpi"),C_MPI_Comm))
const MPI_COMM_NULL_COPY_FN::Ptr{Cvoid} = Ptr{Cvoid}(cglobal(("OMPI_C_MPI_COMM_NULL_COPY_FN","libmpi"),Ptr{Cvoid}))
const MPI_COMM_NULL_DELETE_FN::Ptr{Cvoid} = Ptr{Cvoid}(cglobal(("OMPI_C_MPI_COMM_NULL_DELETE_FN","libmpi"),Ptr{Cvoid}))
const MPI_COMM_SELF::C_MPI_Comm = C_MPI_Comm(cglobal(("ompi_mpi_comm_self","libmpi"),C_MPI_Comm))
const MPI_COMM_WORLD::C_MPI_Comm = C_MPI_Comm(cglobal(("ompi_mpi_comm_world","libmpi"),C_MPI_Comm))
const MPI_COMPLEX::C_MPI_Datatype = C_MPI_Datatype(cglobal(("ompi_mpi_cplex","libmpi"),C_MPI_Datatype))
const MPI_COMPLEX16::C_MPI_Datatype = C_MPI_Datatype(cglobal(("ompi_mpi_complex16","libmpi"),C_MPI_Datatype))
const MPI_COMPLEX32::C_MPI_Datatype = C_MPI_Datatype(cglobal(("ompi_mpi_complex32","libmpi"),C_MPI_Datatype))
const MPI_COMPLEX8::C_MPI_Datatype = C_MPI_Datatype(cglobal(("ompi_mpi_complex8","libmpi"),C_MPI_Datatype))
const MPI_CONVERSION_FN_NULL::Ptr{C_MPI_Datarep_conversion_function} = 0
const MPI_COUNT::C_MPI_Datatype = C_MPI_Datatype(cglobal(("ompi_mpi_count","libmpi"),C_MPI_Datatype))
const MPI_CXX_BOOL::C_MPI_Datatype = C_MPI_Datatype(cglobal(("ompi_mpi_cxx_bool","libmpi"),C_MPI_Datatype))
const MPI_CXX_COMPLEX::C_MPI_Datatype = C_MPI_Datatype(cglobal(("ompi_mpi_cxx_cplex","libmpi"),C_MPI_Datatype))
const MPI_CXX_DOUBLE_COMPLEX::C_MPI_Datatype = C_MPI_Datatype(cglobal(("ompi_mpi_cxx_dblcplex","libmpi"),C_MPI_Datatype))
const MPI_CXX_FLOAT_COMPLEX::C_MPI_Datatype = C_MPI_Datatype(cglobal(("ompi_mpi_cxx_cplex","libmpi"),C_MPI_Datatype))
const MPI_CXX_LONG_DOUBLE_COMPLEX::C_MPI_Datatype = C_MPI_Datatype(cglobal(("ompi_mpi_cxx_ldblcplex","libmpi"),C_MPI_Datatype))
const MPI_C_BOOL::C_MPI_Datatype = C_MPI_Datatype(cglobal(("ompi_mpi_c_bool","libmpi"),C_MPI_Datatype))
const MPI_C_COMPLEX::C_MPI_Datatype = C_MPI_Datatype(cglobal(("ompi_mpi_c_float_complex","libmpi"),C_MPI_Datatype))
const MPI_C_DOUBLE_COMPLEX::C_MPI_Datatype = C_MPI_Datatype(cglobal(("ompi_mpi_c_double_complex","libmpi"),C_MPI_Datatype))
const MPI_C_FLOAT_COMPLEX::C_MPI_Datatype = C_MPI_Datatype(cglobal(("ompi_mpi_c_float_complex","libmpi"),C_MPI_Datatype))
const MPI_C_LONG_DOUBLE_COMPLEX::C_MPI_Datatype = C_MPI_Datatype(cglobal(("ompi_mpi_c_long_double_complex","libmpi"),C_MPI_Datatype))
const MPI_DATATYPE_NULL::C_MPI_Datatype = C_MPI_Datatype(cglobal(("ompi_mpi_datatype_null","libmpi"),C_MPI_Datatype))
const MPI_DISPLACEMENT_CURRENT::C_int = -54278278
const MPI_DISTRIBUTE_BLOCK::C_int = 0
const MPI_DISTRIBUTE_CYCLIC::C_int = 1
const MPI_DISTRIBUTE_DFLT_DARG::C_int = -1
const MPI_DISTRIBUTE_NONE::C_int = 2
const MPI_DIST_GRAPH::C_int = 3
const MPI_DOUBLE::C_MPI_Datatype = C_MPI_Datatype(cglobal(("ompi_mpi_double","libmpi"),C_MPI_Datatype))
const MPI_DOUBLE_COMPLEX::C_MPI_Datatype = C_MPI_Datatype(cglobal(("ompi_mpi_dblcplex","libmpi"),C_MPI_Datatype))
const MPI_DOUBLE_INT::C_MPI_Datatype = C_MPI_Datatype(cglobal(("ompi_mpi_double_int","libmpi"),C_MPI_Datatype))
const MPI_DOUBLE_PRECISION::C_MPI_Datatype = C_MPI_Datatype(cglobal(("ompi_mpi_dblprec","libmpi"),C_MPI_Datatype))
const MPI_DUP_FN::Ptr{Cvoid} = Ptr{Cvoid}(cglobal(("OMPI_C_MPI_DUP_FN","libmpi"),Ptr{Cvoid}))
const MPI_ERRCODES_IGNORE::Ptr{C_int} = 0
const MPI_ERRHANDLER_NULL::C_MPI_Errhandler = C_MPI_Errhandler(cglobal(("ompi_mpi_errhandler_null","libmpi"),C_MPI_Errhandler))
const MPI_ERRORS_ARE_FATAL::C_MPI_Errhandler = C_MPI_Errhandler(cglobal(("ompi_mpi_errors_are_fatal","libmpi"),C_MPI_Errhandler))
const MPI_ERRORS_RETURN::C_MPI_Errhandler = C_MPI_Errhandler(cglobal(("ompi_mpi_errors_return","libmpi"),C_MPI_Errhandler))
const MPI_ERR_ACCESS::C_int = 20
const MPI_ERR_AMODE::C_int = 21
const MPI_ERR_ARG::C_int = 13
const MPI_ERR_ASSERT::C_int = 22
const MPI_ERR_BAD_FILE::C_int = 23
const MPI_ERR_BASE::C_int = 24
const MPI_ERR_BUFFER::C_int = 1
const MPI_ERR_COMM::C_int = 5
const MPI_ERR_CONVERSION::C_int = 25
const MPI_ERR_COUNT::C_int = 2
const MPI_ERR_DIMS::C_int = 12
const MPI_ERR_DISP::C_int = 26
const MPI_ERR_DUP_DATAREP::C_int = 27
const MPI_ERR_FILE::C_int = 30
const MPI_ERR_FILE_EXISTS::C_int = 28
const MPI_ERR_FILE_IN_USE::C_int = 29
const MPI_ERR_GROUP::C_int = 9
const MPI_ERR_INFO::C_int = 34
const MPI_ERR_INFO_KEY::C_int = 31
const MPI_ERR_INFO_NOKEY::C_int = 32
const MPI_ERR_INFO_VALUE::C_int = 33
const MPI_ERR_INTERN::C_int = 17
const MPI_ERR_IN_STATUS::C_int = 18
const MPI_ERR_IO::C_int = 35
const MPI_ERR_KEYVAL::C_int = 36
const MPI_ERR_LASTCODE::C_int = 92
const MPI_ERR_LOCKTYPE::C_int = 37
const MPI_ERR_NAME::C_int = 38
const MPI_ERR_NOT_SAME::C_int = 40
const MPI_ERR_NO_MEM::C_int = 39
const MPI_ERR_NO_SPACE::C_int = 41
const MPI_ERR_NO_SUCH_FILE::C_int = 42
const MPI_ERR_OP::C_int = 10
const MPI_ERR_OTHER::C_int = 16
const MPI_ERR_PENDING::C_int = 19
const MPI_ERR_PORT::C_int = 43
const MPI_ERR_QUOTA::C_int = 44
const MPI_ERR_RANK::C_int = 6
const MPI_ERR_READ_ONLY::C_int = 45
const MPI_ERR_REQUEST::C_int = 7
const MPI_ERR_RMA_ATTACH::C_int = 69
const MPI_ERR_RMA_CONFLICT::C_int = 46
const MPI_ERR_RMA_FLAVOR::C_int = 70
const MPI_ERR_RMA_RANGE::C_int = 68
const MPI_ERR_RMA_SHARED::C_int = 71
const MPI_ERR_RMA_SYNC::C_int = 47
const MPI_ERR_ROOT::C_int = 8
const MPI_ERR_SERVICE::C_int = 48
const MPI_ERR_SIZE::C_int = 49
const MPI_ERR_SPAWN::C_int = 50
const MPI_ERR_TAG::C_int = 4
const MPI_ERR_TOPOLOGY::C_int = 11
const MPI_ERR_TRUNCATE::C_int = 15
const MPI_ERR_TYPE::C_int = 3
const MPI_ERR_UNKNOWN::C_int = 14
const MPI_ERR_UNSUPPORTED_DATAREP::C_int = 51
const MPI_ERR_UNSUPPORTED_OPERATION::C_int = 52
const MPI_ERR_WIN::C_int = 53
const MPI_FILE_NULL::C_MPI_File = C_MPI_File(cglobal(("ompi_mpi_file_null","libmpi"),C_MPI_File))
const MPI_FLOAT::C_MPI_Datatype = C_MPI_Datatype(cglobal(("ompi_mpi_float","libmpi"),C_MPI_Datatype))
const MPI_FLOAT_INT::C_MPI_Datatype = C_MPI_Datatype(cglobal(("ompi_mpi_float_int","libmpi"),C_MPI_Datatype))
const MPI_GRAPH::C_int = 2
const MPI_GROUP_EMPTY::C_MPI_Group = C_MPI_Group(cglobal(("ompi_mpi_group_empty","libmpi"),C_MPI_Group))
const MPI_GROUP_NULL::C_MPI_Group = C_MPI_Group(cglobal(("ompi_mpi_group_null","libmpi"),C_MPI_Group))
const MPI_INFO_ENV::C_MPI_Info = C_MPI_Info(cglobal(("ompi_mpi_info_env","libmpi"),C_MPI_Info))
const MPI_INFO_NULL::C_MPI_Info = C_MPI_Info(cglobal(("ompi_mpi_info_null","libmpi"),C_MPI_Info))
const MPI_INT::C_MPI_Datatype = C_MPI_Datatype(cglobal(("ompi_mpi_int","libmpi"),C_MPI_Datatype))
const MPI_INT16_T::C_MPI_Datatype = C_MPI_Datatype(cglobal(("ompi_mpi_int16_t","libmpi"),C_MPI_Datatype))
const MPI_INT32_T::C_MPI_Datatype = C_MPI_Datatype(cglobal(("ompi_mpi_int32_t","libmpi"),C_MPI_Datatype))
const MPI_INT64_T::C_MPI_Datatype = C_MPI_Datatype(cglobal(("ompi_mpi_int64_t","libmpi"),C_MPI_Datatype))
const MPI_INT8_T::C_MPI_Datatype = C_MPI_Datatype(cglobal(("ompi_mpi_int8_t","libmpi"),C_MPI_Datatype))
const MPI_INTEGER::C_MPI_Datatype = C_MPI_Datatype(cglobal(("ompi_mpi_integer","libmpi"),C_MPI_Datatype))
const MPI_INTEGER1::C_MPI_Datatype = C_MPI_Datatype(cglobal(("ompi_mpi_integer1","libmpi"),C_MPI_Datatype))
const MPI_INTEGER2::C_MPI_Datatype = C_MPI_Datatype(cglobal(("ompi_mpi_integer2","libmpi"),C_MPI_Datatype))
const MPI_INTEGER4::C_MPI_Datatype = C_MPI_Datatype(cglobal(("ompi_mpi_integer4","libmpi"),C_MPI_Datatype))
const MPI_INTEGER8::C_MPI_Datatype = C_MPI_Datatype(cglobal(("ompi_mpi_integer8","libmpi"),C_MPI_Datatype))
const MPI_IN_PLACE::Ptr{C_void} = 1
const MPI_KEYVAL_INVALID::C_int = -1
const MPI_LAND::C_MPI_Op = C_MPI_Op(cglobal(("ompi_mpi_op_land","libmpi"),C_MPI_Op))
const MPI_LOCK_EXCLUSIVE::C_int = 1
const MPI_LOCK_SHARED::C_int = 2
const MPI_LOGICAL::C_MPI_Datatype = C_MPI_Datatype(cglobal(("ompi_mpi_logical","libmpi"),C_MPI_Datatype))
const MPI_LOGICAL1::C_MPI_Datatype = C_MPI_Datatype(cglobal(("ompi_mpi_logical1","libmpi"),C_MPI_Datatype))
const MPI_LOGICAL2::C_MPI_Datatype = C_MPI_Datatype(cglobal(("ompi_mpi_logical2","libmpi"),C_MPI_Datatype))
const MPI_LOGICAL4::C_MPI_Datatype = C_MPI_Datatype(cglobal(("ompi_mpi_logical4","libmpi"),C_MPI_Datatype))
const MPI_LOGICAL8::C_MPI_Datatype = C_MPI_Datatype(cglobal(("ompi_mpi_logical8","libmpi"),C_MPI_Datatype))
const MPI_LONG::C_MPI_Datatype = C_MPI_Datatype(cglobal(("ompi_mpi_long","libmpi"),C_MPI_Datatype))
const MPI_LONG_DOUBLE::C_MPI_Datatype = C_MPI_Datatype(cglobal(("ompi_mpi_long_double","libmpi"),C_MPI_Datatype))
const MPI_LONG_DOUBLE_INT::C_MPI_Datatype = C_MPI_Datatype(cglobal(("ompi_mpi_longdbl_int","libmpi"),C_MPI_Datatype))
const MPI_LONG_INT::C_MPI_Datatype = C_MPI_Datatype(cglobal(("ompi_mpi_long_int","libmpi"),C_MPI_Datatype))
const MPI_LONG_LONG::C_MPI_Datatype = C_MPI_Datatype(cglobal(("ompi_mpi_long_long_int","libmpi"),C_MPI_Datatype))
const MPI_LONG_LONG_INT::C_MPI_Datatype = C_MPI_Datatype(cglobal(("ompi_mpi_long_long_int","libmpi"),C_MPI_Datatype))
const MPI_LOR::C_MPI_Op = C_MPI_Op(cglobal(("ompi_mpi_op_lor","libmpi"),C_MPI_Op))
const MPI_LXOR::C_MPI_Op = C_MPI_Op(cglobal(("ompi_mpi_op_lxor","libmpi"),C_MPI_Op))
const MPI_MAX::C_MPI_Op = C_MPI_Op(cglobal(("ompi_mpi_op_max","libmpi"),C_MPI_Op))
const MPI_MAXLOC::C_MPI_Op = C_MPI_Op(cglobal(("ompi_mpi_op_maxloc","libmpi"),C_MPI_Op))
MPI_MAX_DATAREP_STRING::C_int = 128
MPI_MAX_ERROR_STRING::C_int = 512
MPI_MAX_INFO_KEY::C_int = 255
MPI_MAX_INFO_VAL::C_int = 1024
const MPI_MAX_LIBRARY_VERSION_STRING::C_int = 256
MPI_MAX_OBJECT_NAME::C_int = 128
MPI_MAX_PORT_NAME::C_int = 256
MPI_MAX_PROCESSOR_NAME::C_int = 128
const MPI_MESSAGE_NO_PROC::C_MPI_Message = C_MPI_Message(cglobal(("ompi_message_no_proc","libmpi"),C_MPI_Message))
const MPI_MESSAGE_NULL::C_MPI_Message = C_MPI_Message(cglobal(("ompi_message_null","libmpi"),C_MPI_Message))
const MPI_MIN::C_MPI_Op = C_MPI_Op(cglobal(("ompi_mpi_op_min","libmpi"),C_MPI_Op))
const MPI_MINLOC::C_MPI_Op = C_MPI_Op(cglobal(("ompi_mpi_op_minloc","libmpi"),C_MPI_Op))
const MPI_MODE_APPEND::C_int = 128
const MPI_MODE_CREATE::C_int = 1
const MPI_MODE_DELETE_ON_CLOSE::C_int = 16
const MPI_MODE_EXCL::C_int = 64
const MPI_MODE_NOCHECK::C_int = 1
const MPI_MODE_NOPRECEDE::C_int = 2
const MPI_MODE_NOPUT::C_int = 4
const MPI_MODE_NOSTORE::C_int = 8
const MPI_MODE_NOSUCCEED::C_int = 16
const MPI_MODE_RDONLY::C_int = 2
const MPI_MODE_RDWR::C_int = 8
const MPI_MODE_SEQUENTIAL::C_int = 256
const MPI_MODE_UNIQUE_OPEN::C_int = 32
const MPI_MODE_WRONLY::C_int = 4
const MPI_NO_OP::C_MPI_Op = C_MPI_Op(cglobal(("ompi_mpi_op_no_op","libmpi"),C_MPI_Op))
const MPI_NULL_COPY_FN::Ptr{Cvoid} = Ptr{Cvoid}(cglobal(("OMPI_C_MPI_NULL_COPY_FN","libmpi"),Ptr{Cvoid}))
const MPI_NULL_DELETE_FN::Ptr{Cvoid} = Ptr{Cvoid}(cglobal(("OMPI_C_MPI_NULL_DELETE_FN","libmpi"),Ptr{Cvoid}))
const MPI_OFFSET::C_MPI_Datatype = C_MPI_Datatype(cglobal(("ompi_mpi_offset","libmpi"),C_MPI_Datatype))
const MPI_OP_NULL::C_MPI_Op = C_MPI_Op(cglobal(("ompi_mpi_op_null","libmpi"),C_MPI_Op))
const MPI_ORDER_C::C_int = 0
const MPI_PACKED::C_MPI_Datatype = C_MPI_Datatype(cglobal(("ompi_mpi_packed","libmpi"),C_MPI_Datatype))
const MPI_PROC_NULL::C_int = -2
const MPI_PROD::C_MPI_Op = C_MPI_Op(cglobal(("ompi_mpi_op_prod","libmpi"),C_MPI_Op))
const MPI_REAL::C_MPI_Datatype = C_MPI_Datatype(cglobal(("ompi_mpi_real","libmpi"),C_MPI_Datatype))
const MPI_REAL16::C_MPI_Datatype = C_MPI_Datatype(cglobal(("ompi_mpi_real16","libmpi"),C_MPI_Datatype))
const MPI_REAL4::C_MPI_Datatype = C_MPI_Datatype(cglobal(("ompi_mpi_real4","libmpi"),C_MPI_Datatype))
const MPI_REAL8::C_MPI_Datatype = C_MPI_Datatype(cglobal(("ompi_mpi_real8","libmpi"),C_MPI_Datatype))
const MPI_REPLACE::C_MPI_Op = C_MPI_Op(cglobal(("ompi_mpi_op_replace","libmpi"),C_MPI_Op))
const MPI_REQUEST_NULL::C_MPI_Request = C_MPI_Request(cglobal(("ompi_request_null","libmpi"),C_MPI_Request))
const MPI_ROOT::C_int = -4
const MPI_SEEK_CUR::C_int = 602
const MPI_SEEK_END::C_int = 604
const MPI_SEEK_SET::C_int = 600
const MPI_SHORT::C_MPI_Datatype = C_MPI_Datatype(cglobal(("ompi_mpi_short","libmpi"),C_MPI_Datatype))
const MPI_SHORT_INT::C_MPI_Datatype = C_MPI_Datatype(cglobal(("ompi_mpi_short_int","libmpi"),C_MPI_Datatype))
const MPI_SIGNED_CHAR::C_MPI_Datatype = C_MPI_Datatype(cglobal(("ompi_mpi_signed_char","libmpi"),C_MPI_Datatype))
const MPI_STATUSES_IGNORE::Ptr{C_MPI_Status} = 0
const MPI_STATUS_IGNORE::Ptr{C_MPI_Status} = 0
const MPI_SUBVERSION::C_int = 1
const MPI_SUCCESS::C_int = 0
const MPI_SUM::C_MPI_Op = C_MPI_Op(cglobal(("ompi_mpi_op_sum","libmpi"),C_MPI_Op))
const MPI_TYPECLASS_COMPLEX::C_int = 3
const MPI_TYPECLASS_INTEGER::C_int = 1
const MPI_TYPECLASS_REAL::C_int = 2
const MPI_TYPE_DUP_FN::Ptr{Cvoid} = Ptr{Cvoid}(cglobal(("OMPI_C_MPI_TYPE_DUP_FN","libmpi"),Ptr{Cvoid}))
const MPI_TYPE_NULL_COPY_FN::Ptr{Cvoid} = Ptr{Cvoid}(cglobal(("OMPI_C_MPI_TYPE_NULL_COPY_FN","libmpi"),Ptr{Cvoid}))
const MPI_TYPE_NULL_DELETE_FN::Ptr{Cvoid} = Ptr{Cvoid}(cglobal(("OMPI_C_MPI_TYPE_NULL_DELETE_FN","libmpi"),Ptr{Cvoid}))
const MPI_T_CVAR_HANDLE_NULL::C_MPI_T_cvar_handle = 0
const MPI_T_ENUM_NULL::C_MPI_T_enum = C_NULL
const MPI_T_ERR_CANNOT_INIT::C_int = 56
const MPI_T_ERR_CVAR_SET_NEVER::C_int = 64
const MPI_T_ERR_CVAR_SET_NOT_NOW::C_int = 63
const MPI_T_ERR_INVALID::C_int = 72
const MPI_T_ERR_INVALID_HANDLE::C_int = 59
const MPI_T_ERR_INVALID_INDEX::C_int = 57
const MPI_T_ERR_INVALID_ITEM::C_int = 58
const MPI_T_ERR_INVALID_NAME::C_int = 73
const MPI_T_ERR_INVALID_SESSION::C_int = 62
const MPI_T_ERR_MEMORY::C_int = 54
const MPI_T_ERR_NOT_INITIALIZED::C_int = 55
const MPI_T_ERR_OUT_OF_HANDLES::C_int = 60
const MPI_T_ERR_OUT_OF_SESSIONS::C_int = 61
const MPI_T_ERR_PVAR_NO_ATOMIC::C_int = 67
const MPI_T_ERR_PVAR_NO_STARTSTOP::C_int = 65
const MPI_T_ERR_PVAR_NO_WRITE::C_int = 66
const MPI_T_PVAR_ALL_HANDLES::C_MPI_T_pvar_handle = -1
const MPI_T_PVAR_HANDLE_NULL::C_MPI_T_pvar_handle = 0
const MPI_T_PVAR_SESSION_NULL::C_MPI_T_pvar_session = 0
const MPI_UINT16_T::C_MPI_Datatype = C_MPI_Datatype(cglobal(("ompi_mpi_uint16_t","libmpi"),C_MPI_Datatype))
const MPI_UINT32_T::C_MPI_Datatype = C_MPI_Datatype(cglobal(("ompi_mpi_uint32_t","libmpi"),C_MPI_Datatype))
const MPI_UINT64_T::C_MPI_Datatype = C_MPI_Datatype(cglobal(("ompi_mpi_uint64_t","libmpi"),C_MPI_Datatype))
const MPI_UINT8_T::C_MPI_Datatype = C_MPI_Datatype(cglobal(("ompi_mpi_uint8_t","libmpi"),C_MPI_Datatype))
const MPI_UNDEFINED::C_int = -32766
const MPI_UNSIGNED::C_MPI_Datatype = C_MPI_Datatype(cglobal(("ompi_mpi_unsigned","libmpi"),C_MPI_Datatype))
const MPI_UNSIGNED_CHAR::C_MPI_Datatype = C_MPI_Datatype(cglobal(("ompi_mpi_unsigned_char","libmpi"),C_MPI_Datatype))
const MPI_UNSIGNED_LONG::C_MPI_Datatype = C_MPI_Datatype(cglobal(("ompi_mpi_unsigned_long","libmpi"),C_MPI_Datatype))
const MPI_UNSIGNED_LONG_LONG::C_MPI_Datatype = C_MPI_Datatype(cglobal(("ompi_mpi_unsigned_long_long","libmpi"),C_MPI_Datatype))
const MPI_UNSIGNED_SHORT::C_MPI_Datatype = C_MPI_Datatype(cglobal(("ompi_mpi_unsigned_short","libmpi"),C_MPI_Datatype))
const MPI_UNWEIGHTED::Ptr{C_int} = 2
const MPI_VERSION::C_int = 3
const MPI_WCHAR::C_MPI_Datatype = C_MPI_Datatype(cglobal(("ompi_mpi_wchar","libmpi"),C_MPI_Datatype))
const MPI_WEIGHTS_EMPTY::Ptr{C_int} = 3
const MPI_WIN_DUP_FN::Ptr{Cvoid} = Ptr{Cvoid}(cglobal(("OMPI_C_MPI_WIN_DUP_FN","libmpi"),Ptr{Cvoid}))
const MPI_WIN_FLAVOR_ALLOCATE::C_int = 2
const MPI_WIN_FLAVOR_CREATE::C_int = 1
const MPI_WIN_FLAVOR_DYNAMIC::C_int = 3
const MPI_WIN_FLAVOR_SHARED::C_int = 4
const MPI_WIN_NULL::C_MPI_Win = C_MPI_Win(cglobal(("ompi_mpi_win_null","libmpi"),C_MPI_Win))
const MPI_WIN_NULL_COPY_FN::Ptr{Cvoid} = Ptr{Cvoid}(cglobal(("OMPI_C_MPI_WIN_NULL_COPY_FN","libmpi"),Ptr{Cvoid}))
const MPI_WIN_NULL_DELETE_FN::Ptr{Cvoid} = Ptr{Cvoid}(cglobal(("OMPI_C_MPI_WIN_NULL_DELETE_FN","libmpi"),Ptr{Cvoid}))
const MPI_WIN_SEPARATE::C_int = 1
const MPI_WIN_UNIFIED::C_int = 0
